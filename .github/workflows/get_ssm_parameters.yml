name: get ssm parameters actions

on:
  push:
    paths:
      - .github/workflows/get_ssm_parameters.yml
      - .github/actions/get_ssm_parameters_action/js_action/*
      - .github/actions/get_ssm_parameters_action/py_action/*
      - .github/actions/get_ssm_parameters_action/sh_action/*

jobs:
  job1:
    name: get ssm parameters actions
    runs-on: ubuntu-20.04
    timeout-minutes: 5

    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_GITHUB_ACTIONS_HUB_USER }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_GITHUB_ACTIONS_HUB_USER }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 900

      - name: get time for js start -----
        run: echo "js_start"; echo `date "+%Y-%m-%d %H:%M:%S"`

      - name: Run npm install for actions
        run: |
          cd .github/actions/get_ssm_parameters_action/js_action
          npm install

      - name: Run js action
        id: js-action
        uses: ./.github/actions/get_ssm_parameters_action/js_action
        with:
          sample_input_args: |-
            TEST_VALUE1
            TEST_VALUE2

      - name: Get js action Output
        id: set-js-output
        env:
          SSM_PARAMETERS: "'${{ steps.js-action.outputs.ssm_parameters }}'"
        run: |
          PARAMETERS=$(echo "${SSM_PARAMETERS}" | jq -r 'keys[]')
          for key in "${!PARAMETERS[@]}"; \
          do \
              VAR_VALUE=${PARAMETERS[$key]} \
              SET_OUTPUT_STRING="::set-output name=${key}::${VAR_VALUE}" \
              echo ${SET_OUTPUT_STRING}
          done
        #     ADD_MASK_STRING="::add-mask::${VAR_VALUE}" \
        #     echo "${SET_OUTPUT_STRING}"; echo "${ADD_MASK_STRING}" \
        # done

      - name: ----- get time for js end
        run: echo "js_end"; echo `date "+%Y-%m-%d %H:%M:%S"`

      # - name: get time for py start -----
      #   run: echo "py_start"; echo `date "+%Y-%m-%d %H:%M:%S"`

      # - name: Run py action
      #   id: py-action
      #   uses: ./.github/actions/get_ssm_parameters_action/py_action
      #   with:
      #     sample_input_args: |-
      #       TEST_VALUE1
      #       TEST_VALUE2

      # - name: Get py action Output
      #   id: set-py-output
      #   env:
      #     SSM_PARAMETERS: ${{ steps.py-action.outputs.ssm_parameters }}
      #   run: |
      #     PARAMETERS_ARRAY=( \
      #       TEST_VALUE1 \
      #       TEST_VALUE2 \
      #     )
      #     for key in "${PARAMETERS_ARRAY[@]}"; \
      #     do \
      #         VAR_VALUE="$(jq --arg var_name $key -r '.[$var_name]' <(echo "${SSM_PARAMETERS}"))"; \
      #         SET_OUTPUT_STRING="::set-output name=${key}::${VAR_VALUE}"; \
      #         ADD_MASK_STRING="::add-mask::${VAR_VALUE}"; \
      #         echo "${SET_OUTPUT_STRING}"; echo "${ADD_MASK_STRING}"; \
      #     done

      # - name: ----- get time for py end
      #   run: echo "py_end"; echo `date "+%Y-%m-%d %H:%M:%S"`

      # - name: get time for sh start -----
      #   run: echo "sh_start"; echo `date "+%Y-%m-%d %H:%M:%S"`

      # - name: Run sh action
      #   id: sh-action
      #   uses: ./.github/actions/get_ssm_parameters_action/sh_action
      #   with:
      #     sample_input_args: |-
      #       TEST_VALUE1
      #       TEST_VALUE2

      # - name: Get sh action Output
      #   id: set-sh-output
      #   env:
      #     SSM_PARAMETERS: ${{ steps.sh-action.outputs.ssm_parameters }}
      #   run: |
      #     PARAMETERS_ARRAY=( \
      #       TEST_VALUE1 \
      #       TEST_VALUE2 \
      #     )
      #     for key in "${PARAMETERS_ARRAY[@]}"; \
      #     do \
      #         VAR_VALUE="$(jq --arg var_name $key -r '.[$var_name]' <(echo "${SSM_PARAMETERS}"))"; \
      #         SET_OUTPUT_STRING="::set-output name=${key}::${VAR_VALUE}"; \
      #         ADD_MASK_STRING="::add-mask::${VAR_VALUE}"; \
      #         echo "${SET_OUTPUT_STRING}"; echo "${ADD_MASK_STRING}"; \
      #     done

      # - name: ----- get time for sh end
      #   run: echo "sh_end"; echo `date "+%Y-%m-%d %H:%M:%S"`

      - name: Check Output Mask
        env:
          JS_OUTPUT_TEST_VALUE1: ${{ steps.set-js-output.outputs.TEST_VALUE1 }}
          JS_OUTPUT_TEST_VALUE2: ${{ steps.set-js-output.outputs.TEST_VALUE2 }}
          # PY_OUTPUT_TEST_VALUE1: ${{ steps.set-py-output.outputs.TEST_VALUE1 }}
          # PY_OUTPUT_TEST_VALUE2: ${{ steps.set-py-output.outputs.TEST_VALUE2 }}
          # SH_OUTPUT_TEST_VALUE1: ${{ steps.set-sh-output.outputs.TEST_VALUE1 }}
          # SH_OUTPUT_TEST_VALUE2: ${{ steps.set-sh-output.outputs.TEST_VALUE2 }}
        run: |
          echo "${JS_OUTPUT_TEST_VALUE1}"
          echo "${JS_OUTPUT_TEST_VALUE2}"
        # echo "${PY_OUTPUT_TEST_VALUE1}"
        # echo "${PY_OUTPUT_TEST_VALUE2}"
        # echo "${SH_OUTPUT_TEST_VALUE1}"
        # echo "${SH_OUTPUT_TEST_VALUE2}"
